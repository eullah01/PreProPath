package ppp.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import ppp.HyperEdge2;
import ppp.HyperGraph;
import ppp.Node;

/**
 *
 * @author eullah01
 */
@SuppressWarnings({"rawtypes", "serial", "unchecked"})
public class LoadGraphDialog extends javax.swing.JDialog {

   private final JFileChooser filechooser;
   private HyperGraph graph;

   public LoadGraphDialog(java.awt.Frame parent) {
      super(parent, "Graph Wizard", true);
      initComponents();
      this.filechooser = new JFileChooser();
      this.filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      this.filechooser.setMultiSelectionEnabled(false);
      this.filechooser.setFileFilter(new ExcelFileFilter());
      this.filechooser.setAcceptAllFileFilterUsed(false);
      this.filechooser.setCurrentDirectory(new File("C:\\Documents and Settings\\eullah01\\Desktop"));
//      this.filechooser.setSelectedFile(new File("C:\\Documents and Settings\\eullah01\\Desktop\\Example.xls"));
      this.lpEdges.setLoadNetworkDialog(this);
      this.lpWeights.setLoadNetworkDialog(this);
      this.lpNodes.setLoadNetworkDialog(this);
      this.lpSMatix.setLoadNetworkDialog(this);
      this.graph = null;
   }

   public HyperGraph getGraph() {
      this.setVisible(true);
      return this.graph;
   }

   public File getFile() {
      if (this.filechooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
         return null;
      }
      return this.filechooser.getSelectedFile();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      tpNetwork = new javax.swing.JTabbedPane();
      lpNodes = new ppp.ui.LoadGraphPanel();
      lpEdges = new ppp.ui.LoadGraphPanel();
      lpSMatix = new ppp.ui.LoadGraphPanel();
      lpWeights = new ppp.ui.LoadGraphPanel();
      pButtons = new javax.swing.JPanel();
      bOK = new javax.swing.JButton();
      bCancel = new javax.swing.JButton();

      getContentPane().setLayout(new java.awt.GridBagLayout());

      tpNetwork.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
      tpNetwork.addTab(" Nodes ", lpNodes);
      tpNetwork.addTab(" Edges ", lpEdges);
      tpNetwork.addTab(" S Matrix ", lpSMatix);
      tpNetwork.addTab(" Weights ", lpWeights);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
      getContentPane().add(tpNetwork, gridBagConstraints);

      pButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));

      bOK.setText("OK");
      bOK.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bOKActionPerformed(evt);
         }
      });
      pButtons.add(bOK);

      bCancel.setText("Cancel");
      bCancel.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bCancelActionPerformed(evt);
         }
      });
      pButtons.add(bCancel);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      getContentPane().add(pButtons, gridBagConstraints);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void bOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOKActionPerformed
      String[][] data = this.lpNodes.getData();
      if (data.length <= 0) {
         this.tpNetwork.setSelectedComponent(this.lpNodes);
         this.showError("Please select node names");
         return;
      }
      if (data[0].length != 2) {
         this.tpNetwork.setSelectedComponent(this.lpNodes);
         this.showError("Please select \n1. Node names\n2. Cofactors");
         return;
      }
      String[] nodes = new String[data.length];
      boolean[] cofactors = new boolean[data.length];
      for (int i = 0; i < nodes.length; i++) {
         nodes[i] = data[i][0];
         cofactors[i] = data[i][1].equalsIgnoreCase("true");
         if (!cofactors[i]) {
            try {
               cofactors[i] = (Double.parseDouble(data[i][1]) == 1);
            } catch (NumberFormatException e) {
            }
         }
      }
      data = this.lpEdges.getData();
      if (data.length <= 0) {
         this.tpNetwork.setSelectedComponent(this.lpEdges);
         this.showError("Please select edge names");
         return;
      }
      if (data.length != 1) {
         this.tpNetwork.setSelectedComponent(this.lpEdges);
         this.showError("Please select a single row for edge names");
         return;
      }
      String[] edges = data[0];
      data = this.lpSMatix.getData();
      if (data.length != nodes.length) {
         this.tpNetwork.setSelectedComponent(this.lpSMatix);
         this.showError("The number of rows should be equal to number of nodes (" + nodes.length + ")");
         return;
      }
      if (data[0].length != edges.length) {
         this.tpNetwork.setSelectedComponent(this.lpSMatix);
         this.showError("The number of columns should be equal to number of edges (" + edges.length + ")");
         return;
      }
      double[][] s = new double[nodes.length][edges.length];
      for (int e = 0; e < data.length; e++) {
         for (int n = 0; n < data[e].length; n++) {
            try {
               s[e][n] = Double.parseDouble(data[e][n]);
            } catch (NumberFormatException ex) {
               this.tpNetwork.setSelectedComponent(this.lpSMatix);
               this.showError("S Matrix sould only be numbers");
               return;
            }
         }
      }
      data = this.lpWeights.getData();
      if (data.length != edges.length) {
         this.tpNetwork.setSelectedComponent(this.lpWeights);
         this.showError("The number of rows should be equal to number of edges (" + edges.length + ")");
         return;
      }
      if (data[0].length != 2) {
         this.tpNetwork.setSelectedComponent(this.lpWeights);
         this.showError("Please select \n1. Min Weight\n2. Max Weight");
         return;
      }
      double[][] weights = new double[edges.length][2];
      for (int e = 0; e < data.length; e++) {
         for (int n = 0; n < data[e].length; n++) {
            try {
               weights[e][n] = Double.parseDouble(data[e][n]);
            } catch (NumberFormatException ex) {
               this.tpNetwork.setSelectedComponent(this.lpWeights);
               this.showError("Weights sould only be numbers");
               return;
            }
         }
      }
      this.graph = new HyperGraph();
      for (int e = 0; e < s[0].length; e++) {
         HyperEdge2 edge = new HyperEdge2(edges[e]);
         edge.setMinWeight(weights[e][0]);
         edge.setMaxWeight(weights[e][1]);
         for (int n = 0; n < s.length; n++) {
            if (cofactors[n]) {
               continue;
            }
            Node node = new Node(nodes[n]);
            double c = s[n][e];
            if (c < 0) {
               edge.addSource(node);
            } else if (c > 0) {
               edge.addTarget(node);
            }
         }
         if (edge.getSourceCount() > 0 || edge.getTargetCount() > 0) {
            this.graph.addEdge(edge);
         }
      }
      this.setVisible(false);
   }//GEN-LAST:event_bOKActionPerformed

   private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
      this.graph = null;
      this.setVisible(false);
   }//GEN-LAST:event_bCancelActionPerformed

   private void showError(String message) {
      JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton bCancel;
   private javax.swing.JButton bOK;
   private ppp.ui.LoadGraphPanel lpEdges;
   private ppp.ui.LoadGraphPanel lpNodes;
   private ppp.ui.LoadGraphPanel lpSMatix;
   private ppp.ui.LoadGraphPanel lpWeights;
   private javax.swing.JPanel pButtons;
   private javax.swing.JTabbedPane tpNetwork;
   // End of variables declaration//GEN-END:variables
}
