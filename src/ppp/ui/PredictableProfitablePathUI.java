package ppp.ui;

import ppp.HyperEdge;
import ppp.HyperEdge2;
import ppp.HyperGraph;
import ppp.Node;
import ppp.PredictablePathAlogrithm;

/**
 *
 * @author Ehsan Ullah
 */
@SuppressWarnings({"rawtypes", "serial", "unchecked"})
public class PredictableProfitablePathUI extends javax.swing.JFrame {

   private enum ThresholdFilter {

      MinL("Min Weight < Threshold"), MinLE("Min Weight <= Threshold"), MinE("Min Weight = Threshold"), MinGE("Min Weight >= Threshold"), MinG("Min Weight > Threshold"), MinNE("Min Weight != Threshold"),
      MaxL("Max Weight < Threshold"), MaxLE("Max Weight <= Threshold"), MaxE("Max Weight = Threshold"), MaxGE("Max Weight >= Threshold"), MaxG("Max Weight > Threshold"), MaxNE("Max Weight != Threshold");
      private final String name;

      private ThresholdFilter(String name) {
         this.name = name;
      }

      @Override
      public String toString() {
         return this.name;
      }
   }

   private enum EdgeWeight {

      MinWeight("Min Weight"), MaxWeight("Max Weight"), DiffWeight("Max - Min");
      private final String name;

      private EdgeWeight(String name) {
         this.name = name;
      }

      @Override
      public String toString() {
         return this.name;
      }
   }

   private enum Favor {

      LowWeight("Low Weight"), HighWeight("High Weight");
      private final String name;

      private Favor(String name) {
         this.name = name;
      }

      @Override
      public String toString() {
         return this.name;
      }
   }
   private final LoadGraphDialog dLoad;
   private final GraphDisplayDialog dNetwork;
   private final GraphDisplayDialog dThreshold;
   private final GraphDisplayDialog dFavored;
   private HyperGraph gOriginal;
   private HyperGraph gThreshold;
   private HyperGraph gFavored;

   /**
    * Creates new form FavoredPathRangesUI
    */
   public PredictableProfitablePathUI() {
      initComponents();
      for (ThresholdFilter filter : ThresholdFilter.values()) {
         this.cbThresholdFilter.addItem(filter);
      }
      for (EdgeWeight weight : EdgeWeight.values()) {
         this.cbPathWeight.addItem(weight);
      }
      for (Favor favor : Favor.values()) {
         this.cbFavorCriteria.addItem(favor);
      }
      this.dLoad = new LoadGraphDialog(this);
      this.dNetwork = new GraphDisplayDialog(this, "Graph (Original)", bViewNetwork);
      this.dThreshold = new GraphDisplayDialog(this, "Graph (Threshold)", bViewThreshold);
      this.dFavored = new GraphDisplayDialog(this, "Graph (Favored Path)", bViewFavoredPath);
      this.pack();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      pNetwork = new javax.swing.JPanel();
      bLoadNetwork = new javax.swing.JButton();
      bViewNetwork = new javax.swing.JToggleButton();
      pThreshold = new javax.swing.JPanel();
      cbThreshold = new javax.swing.JCheckBox();
      spThreshold = new javax.swing.JSpinner();
      bApplyThreshold = new javax.swing.JButton();
      lThresholdFilter = new javax.swing.JLabel();
      cbThresholdFilter = new javax.swing.JComboBox();
      bViewThreshold = new javax.swing.JToggleButton();
      pFavoredPath = new javax.swing.JPanel();
      lPathWeight = new javax.swing.JLabel();
      cbPathWeight = new javax.swing.JComboBox();
      bFindPath = new javax.swing.JButton();
      lFavorCriteria = new javax.swing.JLabel();
      cbFavorCriteria = new javax.swing.JComboBox();
      bViewFavoredPath = new javax.swing.JToggleButton();
      lSource = new javax.swing.JLabel();
      cbSource = new javax.swing.JComboBox();
      lTarget = new javax.swing.JLabel();
      cbTarget = new javax.swing.JComboBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("PreProPath");
      setResizable(false);
      getContentPane().setLayout(new java.awt.GridBagLayout());

      pNetwork.setBorder(javax.swing.BorderFactory.createTitledBorder(" Network "));
      pNetwork.setLayout(new java.awt.GridBagLayout());

      bLoadNetwork.setText("Load Network");
      bLoadNetwork.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bLoadNetworkActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 0);
      pNetwork.add(bLoadNetwork, gridBagConstraints);

      bViewNetwork.setText("View");
      bViewNetwork.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bViewNetworkActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
      pNetwork.add(bViewNetwork, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
      getContentPane().add(pNetwork, gridBagConstraints);

      pThreshold.setBorder(javax.swing.BorderFactory.createTitledBorder(" Profitable Network "));
      pThreshold.setLayout(new java.awt.GridBagLayout());

      cbThreshold.setText("Threshold :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      pThreshold.add(cbThreshold, gridBagConstraints);

      spThreshold.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      pThreshold.add(spThreshold, gridBagConstraints);

      bApplyThreshold.setText("Apply");
      bApplyThreshold.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bApplyThresholdActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
      pThreshold.add(bApplyThreshold, gridBagConstraints);

      lThresholdFilter.setText("Select :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 0);
      pThreshold.add(lThresholdFilter, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipadx = 5;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 0);
      pThreshold.add(cbThresholdFilter, gridBagConstraints);

      bViewThreshold.setText("View");
      bViewThreshold.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bViewThresholdActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
      pThreshold.add(bViewThreshold, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
      getContentPane().add(pThreshold, gridBagConstraints);

      pFavoredPath.setBorder(javax.swing.BorderFactory.createTitledBorder(" Predictable Path "));
      pFavoredPath.setLayout(new java.awt.GridBagLayout());

      lPathWeight.setText("Weight :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      pFavoredPath.add(lPathWeight, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipadx = 5;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      pFavoredPath.add(cbPathWeight, gridBagConstraints);

      bFindPath.setText("Find Path");
      bFindPath.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bFindPathActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
      pFavoredPath.add(bFindPath, gridBagConstraints);

      lFavorCriteria.setText("Favor :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      pFavoredPath.add(lFavorCriteria, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipadx = 5;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      pFavoredPath.add(cbFavorCriteria, gridBagConstraints);

      bViewFavoredPath.setText("View Path");
      bViewFavoredPath.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bViewFavoredPathActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
      pFavoredPath.add(bViewFavoredPath, gridBagConstraints);

      lSource.setText("Source :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      pFavoredPath.add(lSource, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipadx = 5;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      pFavoredPath.add(cbSource, gridBagConstraints);

      lTarget.setText("Target :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 0);
      pFavoredPath.add(lTarget, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.ipadx = 5;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 0);
      pFavoredPath.add(cbTarget, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      getContentPane().add(pFavoredPath, gridBagConstraints);

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void bLoadNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadNetworkActionPerformed
      HyperGraph g = this.dLoad.getGraph();
      if (g == null) {
         return;
      }
      this.gOriginal = g;
      this.dNetwork.setGraph(this.gOriginal);
      this.bApplyThresholdActionPerformed(evt);
   }//GEN-LAST:event_bLoadNetworkActionPerformed

   private void bViewNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViewNetworkActionPerformed
      this.viewNetwork(this.dNetwork, this.bViewNetwork.isSelected());
   }//GEN-LAST:event_bViewNetworkActionPerformed

   private void bApplyThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApplyThresholdActionPerformed
      if (this.gOriginal == null) {
         return;
      }
      if (this.cbThreshold.isSelected()) {
         double threshold = (Double) this.spThreshold.getValue();
         this.gThreshold = new HyperGraph();
         ThresholdFilter filter = (ThresholdFilter) this.cbThresholdFilter.getSelectedItem();
         for (HyperEdge edge : this.gOriginal.getEdges()) {
            HyperEdge2 edge2 = (HyperEdge2) edge;
            switch (filter) {
               case MaxE:
                  if (edge2.getMaxWeight() == threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MaxG:
                  if (edge2.getMaxWeight() > threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MaxGE:
                  if (edge2.getMaxWeight() >= threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MaxL:
                  if (edge2.getMaxWeight() < threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MaxLE:
                  if (edge2.getMaxWeight() <= threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MaxNE:
                  if (edge2.getMaxWeight() != threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinE:
                  if (edge2.getMinWeight() == threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinG:
                  if (edge2.getMinWeight() > threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinGE:
                  if (edge2.getMinWeight() >= threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinL:
                  if (edge2.getMinWeight() < threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinLE:
                  if (edge2.getMinWeight() <= threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
               case MinNE:
                  if (edge2.getMinWeight() != threshold) {
                     this.gThreshold.addEdge(edge);
                  }
                  break;
            }
         }
      } else {
         this.gThreshold = new HyperGraph(this.gOriginal);
      }
      this.dThreshold.setGraph(this.gThreshold);
      this.cbSource.removeAllItems();
      this.cbTarget.removeAllItems();
      for (Node node : this.gThreshold.getNodes()) {
         this.cbSource.addItem(node);
         this.cbTarget.addItem(node);
      }
      this.pack();
   }//GEN-LAST:event_bApplyThresholdActionPerformed

   private void bViewThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViewThresholdActionPerformed
      this.viewNetwork(this.dThreshold, this.bViewThreshold.isSelected());
   }//GEN-LAST:event_bViewThresholdActionPerformed

   private void bFindPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFindPathActionPerformed
      if (this.gThreshold == null) {
         return;
      }
      EdgeWeight weight = (EdgeWeight) this.cbPathWeight.getSelectedItem();
      for (HyperEdge edge : this.gThreshold.getEdges()) {
         HyperEdge2 edge2 = (HyperEdge2) edge;
         switch (weight) {
            case DiffWeight:
               edge.setWeight(edge2.getMaxWeight() - edge2.getMinWeight());
               break;
            case MaxWeight:
               edge.setWeight(edge2.getMaxWeight());
               break;
            case MinWeight:
               edge.setWeight(edge2.getMinWeight());
               break;
         }
      }
      Favor favor = (Favor) this.cbFavorCriteria.getSelectedItem();
      switch (favor) {
         case HighWeight:
            this.gFavored = PredictablePathAlogrithm.getFavoredPathHighWeights(this.gThreshold, new Node(this.cbSource.getSelectedItem().toString()), new Node(this.cbTarget.getSelectedItem().toString()));
            break;
         case LowWeight:
            this.gFavored = PredictablePathAlogrithm.getFavoredPathLowerWeights(this.gThreshold, new Node(this.cbSource.getSelectedItem().toString()), new Node(this.cbTarget.getSelectedItem().toString()));
            break;
      }
      this.dThreshold.setGraph(this.gThreshold);
      this.dFavored.setGraph(this.gFavored);
   }//GEN-LAST:event_bFindPathActionPerformed

   private void bViewFavoredPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViewFavoredPathActionPerformed
      this.viewNetwork(this.dFavored, this.bViewFavoredPath.isSelected());
   }//GEN-LAST:event_bViewFavoredPathActionPerformed

   private void viewNetwork(GraphDisplayDialog dialog, boolean visible) {
      dialog.setVisible(visible);
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton bApplyThreshold;
   private javax.swing.JButton bFindPath;
   private javax.swing.JButton bLoadNetwork;
   private javax.swing.JToggleButton bViewFavoredPath;
   private javax.swing.JToggleButton bViewNetwork;
   private javax.swing.JToggleButton bViewThreshold;
   private javax.swing.JComboBox cbFavorCriteria;
   private javax.swing.JComboBox cbPathWeight;
   private javax.swing.JComboBox cbSource;
   private javax.swing.JComboBox cbTarget;
   private javax.swing.JCheckBox cbThreshold;
   private javax.swing.JComboBox cbThresholdFilter;
   private javax.swing.JLabel lFavorCriteria;
   private javax.swing.JLabel lPathWeight;
   private javax.swing.JLabel lSource;
   private javax.swing.JLabel lTarget;
   private javax.swing.JLabel lThresholdFilter;
   private javax.swing.JPanel pFavoredPath;
   private javax.swing.JPanel pNetwork;
   private javax.swing.JPanel pThreshold;
   private javax.swing.JSpinner spThreshold;
   // End of variables declaration//GEN-END:variables
}
