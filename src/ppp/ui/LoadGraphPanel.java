package ppp.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author eullah01
 */
@SuppressWarnings({"rawtypes", "serial", "unchecked"})
public class LoadGraphPanel extends javax.swing.JPanel implements ActionListener {

   private LoadGraphDialog dialog;
   private final DefaultComboBoxModel<String> sheetsModel;
   private final DefaultTableModel dataModel;
   private Workbook workbook;
   private boolean sheetsChanging;

   public LoadGraphPanel() {
      this.sheetsModel = new DefaultComboBoxModel<>();
      this.dataModel = new DefaultTableModel();
      initComponents();
      this.sheetsChanging = false;
      this.cbSheet.addActionListener(this);
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      lFile = new javax.swing.JLabel();
      tfFile = new javax.swing.JTextField();
      bBrowse = new javax.swing.JButton();
      lSheet = new javax.swing.JLabel();
      cbSheet = new javax.swing.JComboBox();
      spData = new javax.swing.JScrollPane();
      tblData = new javax.swing.JTable();

      setLayout(new java.awt.GridBagLayout());

      lFile.setText("File :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
      add(lFile, gridBagConstraints);

      tfFile.setEditable(false);
      tfFile.setBorder(null);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
      add(tfFile, gridBagConstraints);

      bBrowse.setText("Browse");
      bBrowse.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            bBrowseActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 10);
      add(bBrowse, gridBagConstraints);

      lSheet.setText("Sheet :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
      add(lSheet, gridBagConstraints);

      cbSheet.setModel(this.sheetsModel);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
      add(cbSheet, gridBagConstraints);

      spData.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
      spData.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

      tblData.setModel(this.dataModel);
      tblData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
      tblData.setColumnSelectionAllowed(true);
      spData.setViewportView(tblData);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      add(spData, gridBagConstraints);
   }// </editor-fold>//GEN-END:initComponents

   private void bBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBrowseActionPerformed
      File file = this.dialog.getFile();
      if (file == null) {
         return;
      }
      this.tfFile.setText(file.getAbsolutePath());
      try {
         this.workbook = new HSSFWorkbook(new FileInputStream(file));
         this.sheetsChanging = true;
         this.sheetsModel.removeAllElements();
         for (int sheetId = 0; sheetId < this.workbook.getNumberOfSheets(); sheetId++) {
            this.sheetsModel.addElement(this.workbook.getSheetName(sheetId));
         }
      } catch (IOException e) {
         JOptionPane.showMessageDialog(this.dialog, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
      this.sheetsChanging = false;
      this.actionPerformed(null);

   }//GEN-LAST:event_bBrowseActionPerformed

   @Override
   public void actionPerformed(ActionEvent evt) {
      if (this.sheetsChanging) {
         return;
      }
      Sheet sheet = this.workbook.getSheetAt(this.cbSheet.getSelectedIndex());
      int columns = 0;
      int rows = sheet.getPhysicalNumberOfRows();
      for (int r = 0; r < rows; r++) {
         Row row = sheet.getRow(r);
         if (row != null) {
            if (columns < row.getPhysicalNumberOfCells()) {
               columns = row.getPhysicalNumberOfCells();
            }
         }
      }
      this.dataModel.setColumnCount(columns);
      this.dataModel.setRowCount(rows);
      for (int r = 0; r < rows; r++) {
         Row row = sheet.getRow(r);
         for (int c = 0; c < columns; c++) {
            if (r == 0) {
               this.tblData.getColumnModel().getColumn(c).setMinWidth(50);
            }
            String value = "";
            if (row != null) {
               Cell cell = row.getCell(c);
               if (cell != null) {
                  value = cell.toString();
               }
            }
            this.dataModel.setValueAt(value, r, c);
         }
      }
   }

   public void setLoadNetworkDialog(LoadGraphDialog dialog) {
      this.dialog = dialog;
   }

   public String[][] getData() {
      int[] rows = this.tblData.getSelectedRows();
      int[] columns = this.tblData.getSelectedColumns();
      String[][] data = new String[rows.length][columns.length];
      for (int r = 0; r < rows.length; r++) {
         for (int c = 0; c < columns.length; c++) {
            data[r][c] = this.tblData.getValueAt(rows[r], columns[c]).toString();
         }
      }
      return data;
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton bBrowse;
   private javax.swing.JComboBox cbSheet;
   private javax.swing.JLabel lFile;
   private javax.swing.JLabel lSheet;
   private javax.swing.JScrollPane spData;
   private javax.swing.JTable tblData;
   private javax.swing.JTextField tfFile;
   // End of variables declaration//GEN-END:variables
}
